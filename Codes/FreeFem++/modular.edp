int n=20 ; //number of modes
int nev=30; //number of e i g env a l u e s to be c a l c u l a t e d

string fnm = "modular_surface_100nev . txt " ; //file name for saving

// vertices = (0,0.26607724526008814), (0,0), (\pm 0.14062592996432,0)


real yc = 1;//2.0121921726123;//1;//1.0000648650767; // radius of circle
real xc = 2;//3.6258450075213;//2;
real r = 2; //4.0001297343609; // centre of circle on x-axis
real R = 4;//16.1956693580892;
real angle = pi/3; //(2-sqrt(3))
real T = 2-sqrt(3);//0.14062592996432;//2-sqrt(3)


//border G1 (t=0,-pi/6){ x=-2+sqrt(r)*cos(t) ; y=yc+sqrt(r)*sin(t); label=1;};
border G1 (t=0,-T){ x = t ; y=yc-sqrt(R-(t+xc)^2); label=1;};


border G2 ( t=-T,0){ x = t; y=0; label=2;};
border G3 ( t=0,T){ x = t; y=0; label=3;};
//border G2 (t=pi/6,0){ x=-2+r*cos(t) ; y=-1+2*sin(t); label=2;};
border G4 ( t=T,0) { x= t; y=yc-sqrt(R-(t-xc)^2); label=4;};


//border G3 ( t=0,(2-sqrt(3)+0.0001)) { x= t; y=0; label=3;};
//border G3 (t=pi,5*pi/6){ x=2+r*cos(t) ; y=-1+r*sin(t); label=3;};

//border G4 (t=7*pi/6,pi) { x=2+sqrt(r)*cos(t) ; y=yc+sqrt(r)*sin(t); label=4;};


plot (G1(n)+G2(n)+G3(n)+G4(n));

mesh Th=buildmesh(G1(2*n)+G2(n)+G3(n)+G4(2*n),fixeborder=true);

plot (Th,wait=true,fill=true);



//Adapting the mesh messes up the periodic boundary conditions
func metric = 4/(1-x^2-y^2)^2;
//mesh ATh = adaptmesh(Th,metric);
//Th = adaptmesh(Th,metric);

//plot (Th,wait=true,fill=true);
fespace Vh(Th,P2,periodic=[[1,y],[4,y],[2,y-x],[3,x-y]]);
//fespace Vh(Th,P2);



//glues opposite sides such that orientation is preserved
Vh u1,u2;


real sigma=200 ; // value of the shift


varf op(u1,u2)=int2d(Th)(dx(u1)*dx(u2)+dy(u1)*dy(u2)-sigma*(u1*u2)*metric);//+on(G1,u1=0)+on(G2,u1=0)+on(G3,u1=0)+on(G4,u1=0);
varf b([u1],[u2])=int2d(Th)((u1*u2)*metric);

matrix OP = op(Vh,Vh,solver=LU,factorize=1);
matrix B = b(Vh,Vh,solver=CG,eps=1e-20);

real[int] ev(nev);
Vh[int] eV(nev);

int k=EigenValue(OP,B,sym=true, sigma=sigma, value=ev, vector=eV, tol=1e-12, maxit=0, ncv=0);

for(int i=0; i<k;i++){
	u1=eV[i];
	real gg = int2d(Th)(dx(u1)*dx(u1)+dy(u1)*dy(u1));
	real mm= int2d(Th)(u1*u1);
	
	ofstream Eva(fnm,append);
	Eva << ev[i] << "\n";
	cout << "lambda[" << i << "] = " << ev[i] << ", err= " << int2d(Th)(dx(u1)*dx(u1) + dy(u1)*dy(u1) - ((ev[i])*u1*u1)*4/(1-x^2-y^2)^2) << endl;
    plot(eV[i], cmm="Eigen Vector "+i+" value ="+ev[i], wait=true, value=true, fill=true);  //,hsv=colorhsv);
	//cout<<"----"<<i<<""<<ev[i]<<"err="<<dx(u1)*dx(u1)+dy(u1)*dy(u1)-(ev[i])*u1*u1<< "---" << endl; plot(eV[i], cmm="EigenVector"+i+"valeur="+ev[i],wait=1,value=1);
	//uncomment the above two lines to display level sets for each eigenfunction
}